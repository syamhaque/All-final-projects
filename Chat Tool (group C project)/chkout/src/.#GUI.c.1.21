#include <gtk/gtk.h>
#include <cairo.h>
#include <cairo-xlib.h>
#include "GUI.h"
#include <assert.h>
#include <stdio.h>
#include "User.h"
#include "Constants.h"

/*Checks the textbox entries and if they are filled attempts a mock login*/
void gui_login(GtkWidget *widget, gpointer user){
	USER *user_tmp = (USER*) user;
	if(gtk_entry_get_text_length(GTK_ENTRY(user_tmp->username_entry)) == 0){
		g_print("Please enter an username.\n");
	}
	else if(gtk_entry_get_text_length(GTK_ENTRY(user_tmp->password_entry)) == 0){
		g_print("Please enter a password.\n");
	}
	else{
		user_tmp->username = gtk_entry_get_text(GTK_ENTRY(user_tmp->username_entry));
		user_tmp->password = gtk_entry_get_text(GTK_ENTRY(user_tmp->password_entry));
		#ifdef FULL_CLIENT
		INPUT = 1;
		#endif //FULL_CLIENT
		#ifdef TEST_GUI
		g_print("Login attempted with username %s and password %s\n", user_tmp->username, user_tmp->password);
		#endif //TEST_GUI
		gtk_widget_hide(gtk_widget_get_toplevel (widget));
		gui_mainScreen(NULL, NULL);
	}
}

/*quits the window*/
gboolean delete_event(GtkWidget *widget, GdkEvent *event, gpointer data){
	#ifndef FULL_CLIENT
	gtk_main_quit();
	#endif
	
	#ifdef FULL_CLIENT
	GUI_QUIT = 1;
	#endif
	return FALSE;
}

/*Asks a new user for username and password and registers the user.*/
void gui_registerUser(GtkWidget *widget, gpointer user){
	USER *user_tmp = (USER*) user;
	if(gtk_entry_get_text_length(GTK_ENTRY(user_tmp->username_entry)) == 0){
		g_print("Please enter an username.\n");
	}
	else if(gtk_entry_get_text_length(GTK_ENTRY(user_tmp->password_entry)) == 0){
		g_print("Please enter a password.\n");
	}
	else if(gtk_entry_get_text_length(GTK_ENTRY(user_tmp->password_entry2)) == 0){
		g_print("Please confirm password.\n");
	}
	else if(!g_strcmp0(gtk_entry_get_text(GTK_ENTRY(user_tmp->password_entry)), gtk_entry_get_text(GTK_ENTRY(user_tmp->password_entry2)))){
		user_tmp->username = gtk_entry_get_text(GTK_ENTRY(user_tmp->username_entry));
		user_tmp->password = gtk_entry_get_text(GTK_ENTRY(user_tmp->password_entry));
		g_print("Registration attempted with username %s and password %s\n", user_tmp->username, user_tmp->password);
		g_free(user_tmp);
		gtk_widget_destroy(gtk_widget_get_toplevel (widget));
		g_list_foreach(gtk_window_list_toplevels (), (GFunc)gtk_widget_show_all, NULL);
	}
	else{
		g_print("Password fields do not match!\n");
	}
}

/*Makes the Log In screen*/
void gui_loginScreen(gpointer user){
	GtkWidget *window;
	GtkWidget *user_entry, *pass_entry;
	GtkWidget *button;
	GtkWidget *box;
	GtkWidget *label;
	USER *user_data = (USER*) user;
	
	/*Create window*/
	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
	gtk_window_set_default_size((GtkWindow*) window, 500, 500);
	
	/*Connects delete_event signal to main window so that it closes when the X is clicked*/
	g_signal_connect(window, "delete_event", G_CALLBACK(delete_event), NULL);
	gtk_container_set_border_width(GTK_CONTAINER(window), 10);
	
	/*Create a vertical box (vbox) to put the text entry fields and login, register, etc. buttons*/
	box = gtk_vbox_new(FALSE, 0);
	
	/*Creates entry for username*/
	label = gtk_label_new("Username");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	user_entry = gtk_entry_new();
	user_data->username_entry = user_entry;
	g_signal_connect(user_entry, "activate", G_CALLBACK(gui_login), user_data);
	gtk_box_pack_start(GTK_BOX(box),user_entry,FALSE,FALSE,0);
	gtk_widget_show(user_entry);
		
	/*Creates entry for password*/
	label = gtk_label_new("Password");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	pass_entry = gtk_entry_new();
	user_data->password_entry = pass_entry;
	gtk_entry_set_visibility(GTK_ENTRY(pass_entry), FALSE);
	g_signal_connect(pass_entry, "activate", G_CALLBACK(gui_login), user_data);
	gtk_box_pack_start(GTK_BOX(box),pass_entry,FALSE,FALSE,0);
	gtk_widget_show(pass_entry);
	
	/*Creates login button*/
	button = gtk_button_new_with_label("Login");
	g_signal_connect(button, "clicked", G_CALLBACK(gui_login), user_data);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);
	
	/*Creates register button*/
	button = gtk_button_new_with_label("Register");
	g_signal_connect_swapped(button, "clicked", G_CALLBACK(gtk_widget_hide), window);
	g_signal_connect(button, "clicked", G_CALLBACK(gui_registerScreen), NULL);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);
	
	gtk_widget_show(box);
	gtk_container_add(GTK_CONTAINER(window), box);
	gtk_widget_show(window);
}

/*Makes the register new user screen*/
void gui_registerScreen(GtkWidget *widget){
	GtkWidget *register_window;
	GtkWidget *name_entry, *pass_entry1, *pass_entry2;
	GtkWidget *button;
	GtkWidget *box;
	GtkWidget *label;
	USER *user_tmp = g_malloc(sizeof(*user_tmp));
	user_tmp->username_entry = NULL;
	user_tmp->password_entry = NULL;
	/*Create new window*/
	register_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
	gtk_window_set_default_size((GtkWindow*) register_window, 500, 500);
	g_signal_connect(register_window, "delete_event", G_CALLBACK(delete_event), NULL);
	gtk_container_set_border_width(GTK_CONTAINER(register_window), 10);
	/*Create a vertical box (vbox) to put the text entry fields and register button*/
	box = gtk_vbox_new(FALSE, 0);
	/*Creates entry for username*/
	label = gtk_label_new("Username");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	name_entry = gtk_entry_new();
	user_tmp->username_entry = name_entry;
	g_signal_connect(name_entry, "activate", G_CALLBACK(gui_registerUser), user_tmp);
	gtk_box_pack_start(GTK_BOX(box),name_entry,FALSE,FALSE,0);
	gtk_widget_show(name_entry);
	/*Creates entry for password*/
	label = gtk_label_new("Password");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	pass_entry1 = gtk_entry_new();
	user_tmp->password_entry = pass_entry1;
	gtk_entry_set_visibility(GTK_ENTRY(pass_entry1), FALSE);
	g_signal_connect(pass_entry1, "activate", G_CALLBACK(gui_registerUser), user_tmp);
	gtk_box_pack_start(GTK_BOX(box),pass_entry1,FALSE,FALSE,0);
	gtk_widget_show(pass_entry1);
	/*Creates entry for password*/
	label = gtk_label_new("Confirm Password");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	pass_entry2 = gtk_entry_new();
	user_tmp->password_entry2 = pass_entry2;
	gtk_entry_set_visibility(GTK_ENTRY(pass_entry2), FALSE);
	g_signal_connect(pass_entry2, "activate", G_CALLBACK(gui_registerUser), user_tmp);
	gtk_box_pack_start(GTK_BOX(box),pass_entry2,FALSE,FALSE,0);
	gtk_widget_show(pass_entry2);
	/*Creates register button*/
	button = gtk_button_new_with_label("Register");
	g_signal_connect(button, "clicked", G_CALLBACK(gui_registerUser), user_tmp);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);
	/*Show window*/
	gtk_widget_show(box);
	gtk_container_add(GTK_CONTAINER(register_window), box);
	gtk_widget_show(register_window);
}

/*Makes the main screen of the program. From here the user can access contacts and send messages.*/
void gui_mainScreen(GtkWidget *widget, gpointer data){
	GtkWidget *window;
	GtkWidget *button;
	GtkWidget *box;
	GtkWidget *entry, *name_entry;
	GtkWidget *label;

	// GtkWidget *darea;
	// GtkWidget *chatwindow;
	// cairo_surface_t *surface;
	// cairo_t *cr;

	GtkEntryBuffer *buffer;
	DATA *data_tmp = g_malloc(sizeof(*data_tmp));
	data_tmp->data1 = NULL;
	data_tmp->data2 = NULL;
	data_tmp->data3 = NULL;
	
	/*Create window*/
	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
	gtk_window_set_default_size((GtkWindow*) window, 500, 500);
	
	/*Connects delete_event signal to main window so that it closes when the X is clicked*/
	g_signal_connect(window, "delete_event", G_CALLBACK(delete_event), NULL);
	gtk_container_set_border_width(GTK_CONTAINER(window), 10);
	
	/*Create a vertical box (vbox) to put the text entry fields and login, register, etc. buttons*/
	box = gtk_vbox_new(FALSE, 0);
	
	/*Creates text entry for the username to send the message to*/
	label = gtk_label_new("Username");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	name_entry = gtk_entry_new();
	data_tmp->data1 = name_entry;
	g_signal_connect(name_entry, "activate", G_CALLBACK(gui_sendMessage), data_tmp);
	gtk_box_pack_start(GTK_BOX(box),name_entry,FALSE,FALSE,0);
	gtk_widget_show(name_entry);
	
	/*Creates text entry for writing messages*/	
	label = gtk_label_new("Message");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	buffer = gtk_entry_buffer_new(NULL, -1);
	data_tmp->data2 = buffer;
	entry = gtk_entry_new_with_buffer (buffer);
	g_signal_connect(entry, "activate", G_CALLBACK(gui_sendMessage), data_tmp);
	gtk_box_pack_start(GTK_BOX(box),entry,FALSE,FALSE,0);
	gtk_widget_show(entry);
	
	/*Creates button to send messages*/
	button = gtk_button_new_with_label("Send");
	g_signal_connect(button, "clicked", G_CALLBACK(gui_sendMessage), data_tmp);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);

	/*button for contacts*/
	button = gtk_button_new_with_label("Contacts");
	g_signal_connect(button, "clicked", G_CALLBACK(gui_contactsList), NULL);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);

	/*window for chat */

	// chatwindow = gtk_window_new(GTK_WINDOW_TOPLEVEL);
 //    gtk_window_set_default_size((GtkWindow*) chatwindow, 500, 500);
	// gtk_container_set_border_width(GTK_CONTAINER(chatwindow), 10);
	// darea = gtk_drawing_area_new();
 //    gtk_container_add(GTK_CONTAINER(chatwindow), darea);
 //    cr = gdk_cairo_create (gtk_widget_get_window (chatwindow));
	// data_tmp->data3 = cr;
 //    g_signal_connect(darea,"expose-event",G_CALLBACK(on_expose_event),data_tmp);
 //    //gtk_widget_show(darea);
 //    gtk_widget_show(chatwindow);    
	
	gtk_widget_show(box);
	gtk_container_add(GTK_CONTAINER(window), box);
	gtk_widget_show(window);
}

/*Sends the message*/
void gui_sendMessage(GtkWidget *widget, gpointer data){
	DATA *data_tmp = (DATA*) data;
	GtkEntryBuffer *buffer = (GtkEntryBuffer*) data_tmp->data2;
	gchar *username;
	gchar *text;
	// GtkWidget *darea;

	// darea = gtk_drawing_area_new();
 //  gtk_container_add(GTK_CONTAINER(widget), darea);
	
	if(gtk_entry_get_text_length(GTK_ENTRY(data_tmp->data1)) == 0){
		g_print("Please enter an username.\n");
	}
	else if(gtk_entry_buffer_get_length(buffer) == 0){
		g_print("Please enter a message.\n");
	}
	else{
		username = gtk_entry_get_text(GTK_ENTRY(data_tmp->data1));
		text = gtk_entry_buffer_get_text(buffer);
		#ifdef FULL_CLIENT
		strcpy(RECIPIENT, username);
		strcpy(MESSAGE, text);
		INPUT = 1;
		#endif //FULL_CLIENT
		#ifdef TEST_GUI
		g_print("Username: %s Message: %s\n", username, text);
		
		#endif //TEST_GUI
		gui_showText(widget,data_tmp);

	}
}

void gui_contactsList(GtkWidget *widget, gchar *username){
	GtkWidget *contacts_window;
	GtkWidget *scrolled_window;
	GtkWidget *button;
	GtkWidget *box;
	GtkWidget *table;
	char buffer[32];
	int i = 0, j = 0, k = 0, numberOfFriends = 0;

	User *user_tmp = g_malloc(sizeof(*user_tmp));
	username = user_tmp->friends;

	contacts_window = gtk_dialog_new ();

	gtk_window_set_default_size((GtkWindow*) contacts_window, 500, 500);

	gtk_window_set_title (GTK_WINDOW (contacts_window), "Contacts");
	gtk_container_set_border_width(GTK_CONTAINER(contacts_window), 10);

	box = gtk_vbox_new(FALSE, 0);

	/* create scrollbar with table of boxes for friends*/
	scrolled_window = gtk_scrolled_window_new (NULL, NULL);
	gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 10);
	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
                                    GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);

	gtk_box_pack_start (GTK_BOX (GTK_DIALOG(contacts_window)->vbox), scrolled_window, 
			TRUE, TRUE, 0);
    gtk_widget_show (scrolled_window);

    table = gtk_table_new (10, 0, FALSE);

    gtk_table_set_row_spacings (GTK_TABLE (table), 10);
    gtk_table_set_col_spacings (GTK_TABLE (table), 10);

    gtk_scrolled_window_add_with_viewport (
                   GTK_SCROLLED_WINDOW (scrolled_window), table);
    gtk_widget_show (table);

    for(j = 0; j < MAX_FRIEND; j++){
    	for (i = 0; i < 20; i++) {
    		if(g_strcmp0(username[j], "0") == 0){
    			numberOfFriends = j;
    			break;
    		}
    	}
    }
    for(j = 0; j < numberOfFriends; j++){
	    for (i = 0; i < 20; i++) {
	    	if (g_strcmp0(username[j][i], "0") == 0){
				button = gtk_button_new_with_label (username[j][i-1]);
				gtk_table_attach_defaults (GTK_TABLE (table), button, 0, 1, j, j+1);
				gtk_widget_show (button);
	    	}
	    }
	}
	for(k = j; k < MAX_FRIEND; k++){
		button = gtk_button_new_with_label ("Empty");
		gtk_table_attach_defaults (GTK_TABLE (table), button, 0, 1, k, k+1);
	}
    /* add or delete friend button */
    button = gtk_button_new_with_label ("Manage friends");
    g_signal_connect_swapped(button, "clicked", G_CALLBACK(gtk_widget_hide), contacts_window);
    g_signal_connect(button, "clicked", G_CALLBACK(gui_manageFriendsWindow), NULL);
    gtk_box_pack_start(GTK_BOX (GTK_DIALOG (contacts_window)->action_area), button, TRUE, TRUE, 0);
	gtk_widget_show(button);

    /* close button */
    button = gtk_button_new_with_label ("Close");
    g_signal_connect_swapped (button, "clicked", G_CALLBACK (gtk_widget_destroy), contacts_window);
    gtk_widget_set_can_default (button, TRUE);
    gtk_box_pack_start(GTK_BOX (GTK_DIALOG (contacts_window)->action_area), button, TRUE, TRUE, 0);
	gtk_widget_show(button);

	/* show window */
	gtk_widget_show (contacts_window);

}

void gui_manageFriendsWindow(GtkWidget *widget){

	GtkWidget *friendswindow;
	GtkWidget *label;
	GtkWidget *box;
	GtkWidget *button;
	GtkWidget *Friend;
	GtkEntryBuffer *buffer;

	FRIENDS *friends_tmp = g_malloc(sizeof(*friends_tmp));
	friends_tmp->friends = NULL;

	/* open window for adding/deleting friends*/
	friendswindow = gtk_window_new(GTK_WINDOW_TOPLEVEL);
	gtk_window_set_default_size((GtkWindow*) friendswindow, 500, 500);
	gtk_window_set_title (GTK_WINDOW (friendswindow), "Manage Friends");
	gtk_container_set_border_width(GTK_CONTAINER(friendswindow), 10);
	box = gtk_vbox_new(FALSE, 0);

	/* label asking user to enter friends name*/
	label = gtk_label_new("Enter a friends username");
	gtk_box_pack_start(GTK_BOX(box),label,FALSE,FALSE,0);
	gtk_widget_show(label);
	buffer = gtk_entry_buffer_new(NULL, -1);
	friends_tmp->friends = buffer;
	Friend = gtk_entry_new_with_buffer (buffer);
	g_signal_connect(Friend, "activate", G_CALLBACK(gui_manageFriends), friends_tmp);
	gtk_box_pack_start(GTK_BOX(box),Friend,FALSE,FALSE,0);
	gtk_widget_show(Friend);

	/* button that adds friend */
	button = gtk_button_new_with_label ("Add friend");
	if (g_signal_connect(button, "clicked", G_CALLBACK(gui_manageFriends), friends_tmp)) friends_tmp->manage = 1;
	g_signal_connect_swapped(button, "clicked", G_CALLBACK(gtk_widget_hide), friendswindow);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);

	/* button that deletes friend */
	button = gtk_button_new_with_label ("Delete friend");
	if (g_signal_connect(button, "clicked", G_CALLBACK(gui_manageFriends), friends_tmp)) friends_tmp->manage = 0;
	g_signal_connect_swapped(button, "clicked", G_CALLBACK(gtk_widget_hide), friendswindow);
	gtk_box_pack_start(GTK_BOX(box),button,FALSE,FALSE,0);
	gtk_widget_show(button);

	gtk_container_add(GTK_CONTAINER(friendswindow), box);
	gtk_widget_show_all(friendswindow);
}

/* enter username to delete or add friend */
void gui_manageFriends(GtkWidget *widget, gpointer friends){
	FRIENDS *friends_tmp = (FRIENDS*) friends;
	GtkEntryBuffer *buffer = (GtkEntryBuffer*) friends_tmp->friends;
	gchar *username = g_malloc(sizeof(30));

	if(friends_tmp->manage = 1){
		if(gtk_entry_buffer_get_length(buffer) == 0){
			g_print("Please enter an username.\n");
		}	
		else{
			username = gtk_entry_buffer_get_text(buffer);
			#ifdef TEST_CONTACTS
			g_print("Username: %s\n", username);
			#endif
			gui_contactsList(NULL, username);
		}
	}
	else{
		if(gtk_entry_buffer_get_length(buffer) == 0){
			g_print("Please enter an username.\n");
		}	
		else{
			username = gtk_entry_buffer_get_text(buffer);
			//#ifdef TEST_CONTACTS
			g_print("Username: %s\n", username);
			//#endif
			//gui_contactsList(NULL, username);
		}
	}
}

// FRIENDS *NewFriend(gpointer friends){

// 	FRIENDS *friends_tmp;
// 	friends_tmp = g_malloc(sizeof(FRIENDS));
// 	if (!friends_tmp){
// 		perror("Out of memory! Aborting...");
// 		exit(10);
// 	}
// 	friends_tmp->friends;
// 	return friends_tmp;
// }

// void DeleteFriend(FRIENDS *friends_tmp){

// 	assert(friends_tmp);
// 	g_free(friends_tmp);
// }

// static FENTRY *NewFriendEntry(FRIENDS *friends_tmp){

// 	FENTRY *f;
// 	f = g_malloc(sizeof(FENTRY));
// 	if (!f){
// 		perror("Out of memory! Aborting...");
// 		exit(10);
// 	}
// 	f->List = NULL;
// 	f->Next = NULL;
// 	f->Prev = NULL;
// 	f->Friends = friends_tmp;
// 	return f;
// }

// static FRIENDS *DeleteFriendEntry(FENTRY *f){

// 	FRIENDS *friends_tmp;
// 	assert(f);
// 	friends_tmp = f->Friends;
// 	g_free(f);
// 	return friends_tmp;
// }

// FLIST *NewFriendsList(void){

// 	FLIST *l;
// 	l = g_malloc(sizeof(FLIST));
// 	if (!l){
// 		perror("Out of memory! Aborting...");
// 		exit(10);
// 	}
// 	l->length = 0;
// 	l->First = NULL;
// 	l->Last = NULL;
// 	return l;
// }

// void DeleteFriendsList(FLIST *l){

// 	FENTRY *f, *n;
// 	FRIENDS *friends_tmp;
// 	assert(l);
// 	f = l->First;
// 	while(f){
// 		n = f->Next;
// 		friends_tmp = DeleteFriendEntry(f);
// 		DeleteFriend(friends_tmp);
// 		f = n;
// 	}
// 	g_free(l);
// }

// void AddFriend(FLIST *l, FRIENDS *friends_tmp){

// 	FENTRY *f = NULL;
// 	assert(l);
// 	assert(friends_tmp);
// 	f = NewFriendEntry(friends_tmp);
// 	if(l->Last){
// 		f->List = l;
// 		f->Next = NULL;
// 		f->Prev = l->Last;
// 		l->Last->Next = f;
// 		l->Last = f;
// 	}
// 	else
// 	{ 	f->List = l;
// 		f->Next = NULL;
// 		f->Prev = NULL;
// 		l->First = f;
// 		l->Last = f;
// 	}
// 	l->length++;
// }

void gui_showText(GtkWidget *widget, gchar *text){
  GtkWidget *window;
  GtkWidget *darea;
  cairo_surface_t *surface;
  cairo_t *cr;


  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);

  darea = gtk_drawing_area_new();
  gtk_container_add(GTK_CONTAINER(window), darea);

  g_signal_connect(window,          "destroy", G_CALLBACK(gtk_main_quit), NULL);

  gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
  gtk_window_set_default_size(GTK_WINDOW(window), 400, 90);
  gtk_window_set_title(GTK_WINDOW(window), "GTK window");


  // surface = cairo_xlib_surface_create(
  //     gtk_widget_get_display(window),   /* must be Display *, not struct GdkDisplay * */
  //     window,                            must be Drawable (no star) 
  //     gtk_widget_get_visual(window),    /* must be Visual * */
  //     400,
  //     90     /* int */
  //     );
  //  cr = cairo_create(surface);
  //  cairo_set_source_rgb(cr, 0, 0, 0);
  // cairo_select_font_face(cr, "Sans", CAIRO_FONT_SLANT_NORMAL, 
  //    CAIRO_FONT_WEIGHT_NORMAL);
  // cairo_set_font_size(cr, 40.0);

  // cairo_move_to(cr, 10.0, 50.0);
  // cairo_show_text(cr, "Discipline is power.");
  g_signal_connect(darea, "expose-event",
                 G_CALLBACK(on_expose_event), text);

  gtk_widget_show_all(window);
}

  gboolean on_expose_event (GtkWidget *widget,
                 GdkEventExpose *event,
                 gpointer data)
{
	DATA *data_tmp = (DATA*) data;
	cairo_t *cr;
	cr = gdk_cairo_create (gtk_widget_get_window (widget));
	GtkEntryBuffer *buffer = (GtkEntryBuffer*) data_tmp->data2;
	gchar *username;
	gchar *text;
	username = gtk_entry_get_text(GTK_ENTRY(data_tmp->data1));
	text = gtk_entry_buffer_get_text(buffer);
    cairo_move_to (cr, 30, 30);
    cairo_show_text (cr, username);
    cairo_move_to (cr, 30, 60);
    cairo_show_text (cr, text);
    

    cairo_destroy (cr);

    return FALSE;
}
